<% const chat = JSON.parse(conversation_history) %>

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ChatGPT Chat Module</title>

    <!-- Uncommented styles that are not recommended to change for regular user -->
    <link rel="stylesheet" href="/chat_interface.css" />
</head>

<body>
    <!-- Some hidden data -->
    <span id="env" style="display: none;">
        <%= JSON.stringify(backend) %>
    </span>
    <section class="component" 
        style="
            width: <%= config_style.width %>; 
            height: <%= config_style.height %>;
            background-color: <%= config_style.background_color %>;
            font-family: <%= config_style.font_family %>;
        ">

        <!-- Container to display errors -->
        <section class="error_box none">
            
        </section>

        <!-- Header of the page -->
        <header class="header" 
        style="
            color: <%= config_style.header.color.font %>;
            background-color: <%= config_style.header.color.background %>;
            box-shadow: <%= config_style.header.shadow %>;
            display: <%= config_style.header.hide === true ? 'none' : 'flex' %>
        ">

            <!-- Define a name of the GPT, either it's custom or it's default -->
            <% if(custom_names.gpt_name && custom_names.gpt_name.length > 0) { %>
                <%= custom_names.gpt_name %>
            <% } else { %>
                <%= default_name  %>
            <% } %>

        </header>

        <!-- Section with a chat -->
        <section class="chat" 
        style="
            height: calc(<%= config_style.height %> - (<%= config_style.header.hide === true ? '0px' : '75px' %> + 110px));
            margin-top: <%= config_style.header.hide === true ? '0px' : '75px' %>;
        ">

            <!-- Display every message from history -->
            <% chat.forEach(msg => { %>
                <% if(msg.role !== 'system') { %>

                    <!-- GPT response -->
                    <% if(msg.role === 'assistant') { %>
    
                        <div class="gpt-message message"
                        style="
                            background-color: <%= config_style.messages.gpt.color.background %>;
                        ">
    
                            <div class="section-gpt-profile-picture section-profile-picture">
                                <!-- <img alt="gpt-profile-picture" class="gpt-profile-picture"/> -->
                                <div class="gpt-profile-picture profile-picture"><%= custom_names.short_gpt_name || 'GPT' %></div>
                            </div>
    
                            <div class="section-gpt-message-text section-message-text" 
                            style="
                                color: <%= config_style.messages.gpt.color.font %>;
                            ">
                                <%= msg.content %>
                            </div>
                    
                        </div>
    
                    <% } else if(msg.role === 'user') { %>
    
                        <!-- User's question -->
                        <div class="user-message message"
                        style="
                            background-color: <%= config_style.messages.user.color.background %>;
                        ">
    
                            <div class="section-user-profile-picture section-profile-picture">
                                <!-- <img alt="user-profile-picture" class="user-profile-picture"/> -->
                                <div class="user-profile-picture profile-picture"><%= custom_names.short_user_name || 'User' %></div>
                            </div>
    
                            <div class="section-user-message-text section-message-text"
                            style="
                                color: <%= config_style.messages.user.color.font %>;
                            ">
                                <%= msg.content %>
                            </div>
                        
                        </div>
                        
                    <% } %>
                <% } %>
            <% }) %>
    
        </section>

        <!-- Bottom menu of the chat -->
        <section class="bottom-menu" 
        style="
            background-color: <%= config_style.background_color %>;
            box-shadow: 0px 0px 50px 50px <%= config_style.background_color %>;
        ">

            <!-- Bar with buttons -->
            <section class="button-bar">

                <!-- Button to stop gpt's answer generation -->
                <button class="stop-chat-button chat-button none">

                    <!-- Icon for the button -->
                    <img src="/icons/stop_icon.svg" alt="stop-icon"/>

                    Stop Generating

                </button>

                <!-- Button to restart conversation -->
                <button class="restart-chat-button chat-button">

                    <!-- Icon for the button -->
                    <img src="/icons/restart_icon.svg" alt="restart-icon"/>

                    Restart Conversation

                </button>

            </section>

            <!-- Form to send message to chatGPT -->
            <form class="send-message-form">

                <!-- Text area to make a request to GPT -->
                <textarea 
                    autocomplete="off"
                    autocorrect="on" 
                    required 
                    autofocus
                    class="send-message-input" 
                    placeholder="Send Message..."></textarea>

                <!-- Button to send message -->
                <button class="send-message-button"><img src="/icons/send_icon.svg" alt="send-icon"/></button>
            </form>

            <!-- Message to thank creators -->
            <div class="small-message">
                Embedded <a href="https://chat.openai.com/">ChatGPT</a> chat by <a href="https://nitro-storm.ru">StormShop</a>
            </div>
        </section>
    </section>

    <!-- Script to load NodeJS library "socket.io" -->
    <script src="/socket.io/socket.io.js"></script>

    <!-- Script with main basic JavaScript code -->
    <script>
        // Connect to lib
        const socket = io.connect();

        // Get Object from hidden span with id "env", it contains OBJECT with valuable data
        // (which isn't valuable enough to hide it)
        const env = JSON.parse(document.getElementById('env').textContent.trim())

        // Can user send message
        let sendMessage = true;

        // Get basic tags to work with
        const form = document.querySelector('.send-message-form')
        const input = document.querySelector('.send-message-input')
        const chat_box = document.querySelector('.chat')
        const error_box = document.querySelector('.error_box')
        const restart_button = document.querySelector('.restart-chat-button')
        const stop_button = document.querySelector('.stop-chat-button')

        // Function to display message
        async function createMessage(type = 'user', text = '') {

            // Styles from config
            const config_style = await fetch(`${env.ip}:${env.port}/config/styles`)
                .then(res => res.json())

            // Shortcuts not to type long names
            const gpt = config_style.messages.gpt.color
            const user = config_style.messages.user.color

            // Create all components of the message
            const message_box = document.createElement('div')
            const profile_picture_section = document.createElement('div')
            const profile_picture = document.createElement('div')
            const text_section = document.createElement('div')

            // Add all styles && classes
            message_box.classList.add(`${type}-message`)
            message_box.classList.add(`message`)

            profile_picture_section.classList.add(`section-${type}-profile-picture`)
            profile_picture_section.classList.add(`section-profile-picture`)

            profile_picture.classList.add(`${type}-profile-picture`)
            profile_picture.classList.add(`profile-picture`)

            text_section.classList.add(`section-${type}-message-text`)
            text_section.classList.add(`section-message-text`)
            
            // Setup styles from config
            if(type === 'user') {
                message_box.style.backgroundColor = user.background
                text_section.style.color = user.font
            }
            else {
                message_box.style.backgroundColor = gpt.background
                text_section.style.color = gpt.font
            }

            // Display name
            profile_picture.textContent = type === 'user' ? 'User' : 'GPT'

            // Append and display all components
            profile_picture_section.append(profile_picture)

            text_section.textContent = String(text)

            message_box.append(profile_picture_section)
            message_box.append(text_section)

            chat_box.append(message_box)
        }

        // Function to add chunks of GPT message
        function streamingMessage(chunk) {
            // Get all gpt messages
            const text_sections = document.querySelectorAll('.section-gpt-message-text')

            // Get last gpt message
            const text_section = text_sections[text_sections.length - 1]

            // Add span tag for appearance animation
            const chunk_block = document.createElement('span')
            chunk_block.classList.add('chunk-appearance')

            // Add new chunk of message to the response
            chunk_block.textContent += String(chunk)

            // Add chunk to text wrapper
            text_section.append(chunk_block)
        }

        // Works when message to GPT submitted
        function handleSubmit(e) {

            // Prevent Default Actions of Form (Page Reloads)
            e.preventDefault()

            if(sendMessage) {
                // User can't send 2nd message until gpt answers
                sendMessage = false

                // Show "Stop Generating" button
                stop_button.classList.toggle('none')
                stop_button.classList.add('appearance')

                setTimeout(() => {
                    stop_button.classList.remove('appearance')
                }, 300)

                // Define last message
                const lastChild = chat_box.lastElementChild

                // Check if the message is already sent
                if (lastChild && lastChild.classList.contains('user-message')) {

                    // IF LAST MESSAGE ALREADY WAS FROM USER
                    return;

                } else {

                    // Use function  to display message
                    createMessage('user', input.value)

                    // Get array of coockies
                    const cookies = document.cookie.split(';');
                    let cucId = '';

                    // Find CUC-ID cookie
                    cookies.forEach(i => {
                        if(i.includes('CUC-ID')) {
                            cucId = i.split('=')[1]
                        }
                    })

                    // Send event that message sent to server with all the data
                    createMessage('gpt', '')
                    socket.emit('message_sent', {value: input.value, id: cucId });

                    // Clear input
                    input.value = ''
                }
            }
        }

        // Works when button "Restart Conversation" works
        function handleRestart(e) {

            // Prevent default actions of button
            e.preventDefault()

            // Get array of coockies
            const cookies = document.cookie.split(';');
            let cucId = '';

            // Find CUC-ID cookie
            cookies.forEach(i => {
                if(i.includes('CUC-ID')) {
                    cucId = i.split('=')[1]
                }
            })

            // Delete conversation
            socket.emit('restart_conversation', {id: cucId})

            // Get rid of conversation cookie by expiring it
            document.cookie = "CUC-ID" + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";

            // Reload page
            location.reload();
        }

        // Function to display errors
        function displayError(error) {
            
            // Display error in console
            console.error('Additional Error data: ', error)

            // Display error
            error_box.textContent = error.display

            // Add appearance animation
            if(!error_box.classList.contains('opacity')) error_box.classList.add('opacity')
            
            // Remove display: none
            if(error_box.classList.contains('none')) error_box.classList.remove('none')

            // Remove appearance animation after it played
            setTimeout(() => error_box.classList.contains('opacity') ? error_box.classList.remove('opacity') : null, 300);

            // Hide error after 15 seconds passed
            setTimeout(() => {

                // Add disappearance animation
                if(!error_box.classList.contains('opacity-reverse')) error_box.classList.add('opacity-reverse')

                setTimeout(() => {

                    // Remove disappearance animation
                    if(error_box.classList.contains('opacity-reverse')) error_box.classList.remove('opacity-reverse')

                    // Add display: none
                    if(!error_box.classList.contains('none')) error_box.classList.add('none')

                    // Remove error text
                    error_box.textContent = ''

                }, 300)
            }, 15000)
        }

        // Stops generating response of GPT
        function handleStop(e) {

            // Prevent default actions of button
            e.preventDefault()

            // Triggers event on the backend to stop generating
            socket.emit('stop_generating', { sendMessage: sendMessage })
        }

        // When chunk of response received
        socket.on('chunk', (data) => {

            // Display error if it exists
            if(data && data.error) return;

            // Get chunk of data
            const { content } = data;

            // Add new chunk to GPT response
            streamingMessage(content)
        })

        // When gpt responded
        socket.on('fully_received', (data) => {

            // Display error if it exists
            if(data && data.error) return;

            // User can send message after gpt answered
            sendMessage = true;

            // Show "Stop Generating" button
            stop_button.classList.add('disappearance')

            setTimeout(() => {
                stop_button.classList.remove('disappearance')
                stop_button.classList.toggle('none')
            }, 300)
        })

        // Handle caught error
        socket.on('err', (error) => {
            displayError(error)
        })

        // Add event listeners
        form.addEventListener('submit', handleSubmit)
        restart_button.addEventListener('click', handleRestart)
        stop_button.addEventListener('click', handleStop)

    </script>
</body>

</html>